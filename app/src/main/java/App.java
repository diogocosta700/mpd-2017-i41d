import util.Countify;
import util.HttpRequest;
import util.ICounter;
import util.IRequest;
import weather.WeatherService;
import weather.WeatherServiceCache;
import weather.data.WeatherWebApi;
import weather.model.Location;
import weather.model.WeatherInfo;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import static java.util.Arrays.asList;
import static java.util.stream.Collectors.joining;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static void main(String[] args) throws Exception {
        Chrono chr = new Chrono();
        try(IRequest http = new HttpRequest()) {
            ICounter<String, CompletableFuture<Stream<String>>> req = Countify.of(http::getContent);
            WeatherService api = new WeatherServiceCache(new WeatherWebApi(req::apply));
            List<String> cities = asList("Porto", "London", "Paris", "New%20York", "Barcelona");
            System.out.println("####################################");
            System.out.println("Warming Up....");
            cities
                    .stream()
                    .map(city -> api.search(city).join().findFirst().get().getLast30daysWeather().findFirst().get())
                    .forEach(l -> System.out.println(l));

            req.reset();
            System.out.println("####################################");
            System.out.println("Getting Lisbon...");
            chr.start();
            Location lis = api.search("Lisbon").join().findFirst().get();
            System.out.println(lis);
            chr.elapsed();
            System.out.println("2 requests: 1 for Location + 1 for last 30 days. #requests = " + req.getCount());
            delay(500);
            chr.start();
            System.out.println("Getting Lisbon last 30 days temperatures");
            String temps = lis
                    .getLast30daysWeather()
                    .map(WeatherInfo::getTempC)
                    .map(Object::toString)
                    .collect(Collectors.joining(","));
            System.out.println(temps);
            chr.elapsed();
            System.out.println("No additional requests. #requests = " + req.getCount());

            System.out.println("Getting Lisbon last 30 days AGAIN.... but now from cache...");
            temps = lis
                    .getLast30daysWeather()
                    .map(WeatherInfo::getTempC)
                    .map(Object::toString)
                    .collect(Collectors.joining(","));
            System.out.println(temps);
            chr.elapsed();
            System.out.println("No additional requests. #requests = " + req.getCount());
        }
    }
    private static void delay(int ms) {
        try {
            Thread.sleep(ms);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
    static class Chrono {
        private long init;
        public void start() {
            init = System.nanoTime();
        }
        public void elapsed() {
            long dur = System.nanoTime() - init;
            System.out.println(dur/1000000 + "ms");
            init = System.nanoTime();
        }
    }
}

