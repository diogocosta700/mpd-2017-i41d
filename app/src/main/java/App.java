import util.FileRequest;
import util.IRequest;
import weather.data.dto.WeatherInfoDto;

import java.util.Iterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.stream.Stream;

import static java.util.stream.StreamSupport.stream;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    static final String path = "past-weather.ashx-q-41.15--8.6167-date-2017-02-01-enddate-2017-04-30";

    public static void main(String[] args) {
        int[] counter = {0};
        Predicate<String> isEvenLine = item -> ++counter[0] % 2==0;
        IRequest req = new FileRequest();
        Stream<String> content = req.getContent(path);
        stream(content.spliterator(), false)
            .filter(s->!s.startsWith("#")) // Remove comments
            .skip(1)                       // Skip line: Not Available
            .filter(isEvenLine)            // Remove even lines filter
            .map(WeatherInfoDto::valueOf)  // Map to weatherinfo objects
            .map(WeatherInfoDto::getTempC)
            .max(Integer::compare)
            .ifPresent(System.out::println);

        Supplier<Stream<Integer>> temps = () ->
                stream(req.getContent(path).spliterator(), false)
                .filter(s->!s.startsWith("#")) // Remove comments
                .skip(1)                       // Skip line: Not Available
                .filter(isEvenLine)            // Remove even lines filter
                .map(WeatherInfoDto::valueOf)  // Map to weatherinfo objects
                .map(WeatherInfoDto::getTempC);


        /**
         * 3 equivalent approaches:
         * * Stream::forEach()
         * * Spliterator::tryAdvance() -- Tell what to do
         * * Iterator::next() -- Ask for item and do what you want
         */
        Consumer<Integer> printer = item -> System.out.print(item + ", ");
        temps.get().forEach(printer);
        System.out.println();
        /**
         * <=>
         */
        while(temps.get().spliterator().tryAdvance(printer)){}
        System.out.println();
        /**
         * <=>
         */
        for(Iterator<Integer> iter = temps.get().iterator(); iter.hasNext(); )
            printer.accept(iter.next());

    }

}

