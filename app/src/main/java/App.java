import util.queries.EagerQueries;
import util.HttpRequest;
import util.IRequest;
import util.WeatherPredicate;
import weather.WeatherWebApi;
import weather.model.WeatherInfo;

import java.time.LocalDate;
import java.util.Comparator;

import static java.lang.System.out;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static void main(String[] args) {
        /*
         * Arrange
         */
        IRequest req = new HttpRequest(); // new FileRequest();
        WeatherWebApi api = new WeatherWebApi(req);
        /*
         * Act
         */
        Iterable<WeatherInfo> infos = api.pastWeather(41.15, -8.6167, LocalDate.of(2017,02,01),LocalDate.of(2017,02,28));
        // infos = NaiveQueries.filter(infos, info -> info.getTempC() < 13);
        infos = EagerQueries.<WeatherInfo>filter(infos, info -> info.getTempC() < 13);
        infos = EagerQueries.filter(infos, info -> info.getTempC() < 13);
        /*
         * Assert
         */
        infos.forEach(out::println);

        /*
         * Exemplos de expressões lambdas aplicadas a expressões do tipo
         * interface funcional.
         */
        Comparator<String> cmp1 =  (item1, item2) -> item1.length() - item2.length();
        Comparator<String> cmp2 =  (item1, item2) -> { return 0; };


    }
}

class WeatherByDescription implements WeatherPredicate {

    final String query;

    public WeatherByDescription(String query) {
        this.query = query;
    }

    @Override
    public boolean test(WeatherInfo item) {
        return item.getDescription().toLowerCase().contains(query);
    }
}

class WeatherDryDays implements WeatherPredicate {

    @Override
    public boolean test(WeatherInfo item) {
        return item.getPrecipMM() == 0;
    }
}

