import util.queries.EagerQueries;
import util.HttpRequest;
import util.IRequest;
import util.WeatherPredicate;
import util.queries.LazyQueries;
import weather.WeatherWebApi;
import weather.model.Location;
import weather.model.WeatherInfo;

import java.time.LocalDate;
import java.util.Comparator;
import java.util.function.Function;

import static java.lang.System.out;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static void main(String[] args) {
        lazy();
    }
    public static void eager() {
        IRequest req = new HttpRequest(); // new FileRequest();
        IRequest logger = path -> () -> {
            out.println("Requesting...");
            return req.getContent(path).iterator();
        };
        // WeatherWebApi api = new WeatherWebApi(path -> logger.apply(path));
        WeatherWebApi api = new WeatherWebApi(logger);
        out.println("Searching...");
        Iterable<Location> locals = api.search("oporto");
        out.println("Filtering...");
        locals = EagerQueries.filter(locals, l -> {out.println("filter...." + l); return l.getLatitude() > 0; });
        out.println("MApping...");
        Iterable<String> locs = EagerQueries.map(locals, l -> {out.println("map..." + l); return l.getRegion();});
        // out.println(locs.iterator().next());
    }

    public static void lazy() {
        IRequest req = new HttpRequest(); // new FileRequest();
        Function<String, Iterable<String>> logger = path -> {
            out.println("Requesting...");
            return req.getContent(path);
        };
        WeatherWebApi api = new WeatherWebApi(logger::apply);
        out.println("Searching...");
        Iterable<Location> locals = api.search("oporto");
        out.println("Filtering...");
        locals = LazyQueries.filter(locals, l -> {out.println("filter...." + l); return l.getLatitude() > 0; });
        out.println("MApping...");
        Iterable<String> locs = LazyQueries.map(locals, l -> {out.println("map..." + l); return l.getRegion();});
        out.println(locs.iterator().next());
    }
}

