import util.HttpRequest;
import weather.WeatherService;
import weather.data.WeatherWebApi;
import weather.model.Location;
import weather.model.WeatherInfo;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.IntStream;

import static java.util.Arrays.asList;
import static java.util.stream.Collectors.joining;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    static final String path = "past-weather.ashx-q-41.15--8.6167-date-2017-02-01-enddate-2017-04-30";

    public static void main(String[] args) {
        WeatherService api = new WeatherService(new WeatherWebApi(new HttpRequest()));
        Chrono chr = new Chrono();
        List<String> cities = asList("Porto", "London", "Paris", "New%20York", "Barcelona");
        cities
                .stream()
                .map(city -> api.search(city).findFirst().get())
                .forEach(l -> System.out.println(l));

        for (int i = 0; i < 5 ; i++) {
            System.out.println("####################################");
            System.out.println("Getting Lisbon...");
            chr.start();
            Location lis = api.search("Lisbon").findFirst().get();
            System.out.println(lis);
            chr.elapsed();

            System.out.println("Getting Lisbon past weather");
            lis
                    .getLast30daysWeather()
                    .mapToInt(WeatherInfo::getTempC)
                    .max()
                    .ifPresent(t -> System.out.println("Max temp = " + t));
            chr.elapsed();
        }

    }

    static class Chrono {
        private long init;
        public void start() {
            init = System.nanoTime();
        }
        public void elapsed() {
            long dur = System.nanoTime() - init;
            System.out.println(dur/1000000 + "ms");
            init = System.nanoTime();
        }
    }
}

